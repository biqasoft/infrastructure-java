/*
 * Copyright (c) 2016. com.biqasoft
 */

package com.biqasoft.bpmn.safejs.internal;


@SuppressWarnings("all")
public class BeautifyJs {

    private static String code = null;

    public static String codeCreate() {

        if (code !=null) return code;

        StringBuilder _builder = new StringBuilder();
        _builder.append("\t");
        _builder.append("\r\n");
        _builder.append("/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */");
        _builder.append("\r\n");
        _builder.append("/*");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("The MIT License (MIT)");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("Copyright (c) 2007-2013 Einar Lielmanis and contributors.");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("Permission is hereby granted, free of charge, to any person");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("obtaining a copy of this software and associated documentation files");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("(the \"Software\"), to deal in the Software without restriction,");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("including without limitation the rights to use, copy, modify, merge,");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("publish, distribute, sublicense, and/or sell copies of the Software,");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("and to permit persons to whom the Software is furnished to do so,");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("subject to the following conditions:");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("The above copyright notice and this permission notice shall be");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("included in all copies or substantial portions of the Software.");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("SOFTWARE.");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append(" ");
        _builder.append("JS Beautifier");
        _builder.append("\r\n");
        _builder.append("---------------");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("Written by Einar Lielmanis, <einar@jsbeautifier.org>");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("http://jsbeautifier.org/");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("Originally converted to javascript by Vital, <vital76@gmail.com>");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("\"End braces on own line\" added by Chris J. Shull, <chrisjshull@gmail.com>");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("Parsing improvements for brace-less statements by Liam Newman <bitwiseman@gmail.com>");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("Usage:");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("js_beautify(js_source_text);");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("js_beautify(js_source_text, options);");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("  ");
        _builder.append("The options are:");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("indent_size (default 4)          - indentation size,");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("indent_char (default space)      - character to indent with,");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("preserve_newlines (default true) - whether existing line breaks should be preserved,");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk,");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("jslint_happy (default false) - if true, then jslint-stricter mode is enforced.");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("jslint_happy        !jslint_happy");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("---------------------------------");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("function ()         function()");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("switch () {         switch() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("case 1:               case 1:");
        _builder.append("\r\n");
        _builder.append("              ");
        _builder.append("break;                break;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}                   }");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("space_after_anon_function (default false) - should the space before an anonymous function\'s parens be added, \"function()\" vs \"function ()\",");
        _builder.append("\r\n");
        _builder.append("          ");
        _builder.append("NOTE: This option is overriden by jslint_happy (i.e. if jslint_happy is true, space_after_anon_function is true by design)");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("brace_style (default \"collapse\") - \"collapse\" | \"expand\" | \"end-expand\" | \"none\"");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("space_before_conditional (default true) - should the space before conditional statement be added, \"if(true)\" vs \"if (true)\",");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("unescape_strings (default false) - should printable characters in strings encoded in \\xNN notation be unescaped, \"example\" vs \"\\x65\\x78\\x61\\x6d\\x70\\x6c\\x65\"");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("wrap_line_length (default unlimited) - lines should wrap at next opportunity after this number of characters.");
        _builder.append("\r\n");
        _builder.append("          ");
        _builder.append("NOTE: This is not a hard limit. Lines will continue until a point where a newline would");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("be preserved if it were present.");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("end_with_newline (default false)  - end output with a newline");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("e.g");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("js_beautify(js_source_text, {");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("\'indent_size\': 1,");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("\'indent_char\': \'\\t\'");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("});");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("*/");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("(function() {");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("var acorn = {};");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("(function (exports) {");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("// This section of code is taken from acorn.");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("//");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("// Acorn was written by Marijn Haverbeke and released under an MIT");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("// license. The Unicode regexps (for identifiers and whitespace) were");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("// taken from [Esprima](http://esprima.org) by Ariya Hidayat.");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("//");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("// Git repositories for Acorn are available at");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("//");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("//     http://marijnhaverbeke.nl/git/acorn");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("//     https://github.com/marijnh/acorn.git");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("// ## Character categories");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("// Big ugly regular expressions that match characters in the");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("// whitespace, identifier, and identifier-start categories. These");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("// are only applied when a character is found to actually have a");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("// code point above 128.");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("var nonASCIIidentifierChars = \"\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("// Whether a single character denotes a newline.");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("var newline = exports.newline = /[\\n\\r\\u2028\\u2029]/;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("// Matches a whole line break (where CRLF is considered a single");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("// line break). Used to count lines.");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("var lineBreak = exports.lineBreak = /\\r\\n|[\\n\\r\\u2028\\u2029]/g;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("// Test whether a given character code starts an identifier.");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("var isIdentifierStart = exports.isIdentifierStart = function(code) {");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("if (code < 65) return code === 36;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("if (code < 91) return true;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("if (code < 97) return code === 95;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("if (code < 123)return true;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("};");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("// Test whether a given character is part of an identifier.");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("var isIdentifierChar = exports.isIdentifierChar = function(code) {");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("if (code < 48) return code === 36;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("if (code < 58) return true;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("if (code < 65) return false;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("if (code < 91) return true;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("if (code < 97) return code === 95;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("if (code < 123)return true;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));");
        _builder.append("\r\n");
        _builder.append("      ");
        _builder.append("};");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("})(acorn);");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("function in_array(what, arr) {");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("for (var i = 0; i < arr.length; i += 1) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (arr[i] === what) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return true;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("return false;");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("function trim(s) {");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("return s.replace(/^\\s+|\\s+$/g, \'\');");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("function ltrim(s) {");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("return s.replace(/^\\s+/g, \'\');");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("function rtrim(s) {");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("return s.replace(/\\s+$/g, \'\');");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("function js_beautify(js_source_text, options) {");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("\"use strict\";");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var beautifier = new Beautifier(js_source_text, options);");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("return beautifier.beautify();");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("var MODE = {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("BlockStatement: \'BlockStatement\', // \'BLOCK\'");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("Statement: \'Statement\', // \'STATEMENT\'");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("ObjectLiteral: \'ObjectLiteral\', // \'OBJECT\',");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("ArrayLiteral: \'ArrayLiteral\', //\'[EXPRESSION]\',");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("ForInitializer: \'ForInitializer\', //\'(FOR-EXPRESSION)\',");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("Conditional: \'Conditional\', //\'(COND-EXPRESSION)\',");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("Expression: \'Expression\' //\'(EXPRESSION)\'");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("};");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("function Beautifier(js_source_text, options) {");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("\"use strict\";");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var output");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var tokens = [], token_pos;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var Tokenizer;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var current_token;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var last_type, last_last_text, indent_string;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var flags, previous_flags, flag_store;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var prefix;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var handlers, opt;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var baseIndentString = \'\';");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("handlers = {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("\'TK_START_EXPR\': handle_start_expr,");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("\'TK_END_EXPR\': handle_end_expr,");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("\'TK_START_BLOCK\': handle_start_block,");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("\'TK_END_BLOCK\': handle_end_block,");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("\'TK_WORD\': handle_word,");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("\'TK_RESERVED\': handle_word,");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("\'TK_SEMICOLON\': handle_semicolon,");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("\'TK_STRING\': handle_string,");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("\'TK_EQUALS\': handle_equals,");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("\'TK_OPERATOR\': handle_operator,");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("\'TK_COMMA\': handle_comma,");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("\'TK_BLOCK_COMMENT\': handle_block_comment,");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("\'TK_COMMENT\': handle_comment,");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("\'TK_DOT\': handle_dot,");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("\'TK_UNKNOWN\': handle_unknown,");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("\'TK_EOF\': handle_eof");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("};");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function create_flags(flags_base, mode) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var next_indent_level = 0;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (flags_base) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("next_indent_level = flags_base.indentation_level;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (!output.just_added_newline() &&");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("flags_base.line_indent_level > next_indent_level) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("next_indent_level = flags_base.line_indent_level;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var next_flags = {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("mode: mode,");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("parent: flags_base,");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("last_text: flags_base ? flags_base.last_text : \'\', // last token text");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("last_word: flags_base ? flags_base.last_word : \'\', // last \'TK_WORD\' passed");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("declaration_statement: false,");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("declaration_assignment: false,");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("multiline_frame: false,");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if_block: false,");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("else_block: false,");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("do_block: false,");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("do_while: false,");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("in_case_statement: false, // switch(..){ INSIDE HERE }");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("in_case: false, // we\'re on the exact line with \"case 0:\"");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("case_body: false, // the indented case-action block");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("indentation_level: next_indent_level,");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("start_line_index: output.get_line_number(),");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("ternary_depth: 0");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("};");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return next_flags;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// Some interpreters have unexpected results with foo = baz || bar;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("options = options ? options : {};");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt = {};");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// compatibility");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("if (options.braces_on_own_line !== undefined) { //graceful handling of deprecated option");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("opt.brace_style = options.braces_on_own_line ? \"expand\" : \"collapse\";");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt.brace_style = options.brace_style ? options.brace_style : (opt.brace_style ? opt.brace_style : \"collapse\");");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// graceful handling of deprecated option");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("if (opt.brace_style === \"expand-strict\") {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("opt.brace_style = \"expand\";");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt.indent_size = options.indent_size ? parseInt(options.indent_size, 10) : 4;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt.indent_char = options.indent_char ? options.indent_char : \' \';");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt.eol = options.eol ? options.eol : \'\\n\';");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt.preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt.break_chained_methods = (options.break_chained_methods === undefined) ? false : options.break_chained_methods;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt.max_preserve_newlines = (options.max_preserve_newlines === undefined) ? 0 : parseInt(options.max_preserve_newlines, 10);");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt.space_in_paren = (options.space_in_paren === undefined) ? false : options.space_in_paren;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt.space_in_empty_paren = (options.space_in_empty_paren === undefined) ? false : options.space_in_empty_paren;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt.jslint_happy = (options.jslint_happy === undefined) ? false : options.jslint_happy;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt.space_after_anon_function = (options.space_after_anon_function === undefined) ? false : options.space_after_anon_function;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt.keep_array_indentation = (options.keep_array_indentation === undefined) ? false : options.keep_array_indentation;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt.space_before_conditional = (options.space_before_conditional === undefined) ? true : options.space_before_conditional;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt.unescape_strings = (options.unescape_strings === undefined) ? false : options.unescape_strings;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt.wrap_line_length = (options.wrap_line_length === undefined) ? 0 : parseInt(options.wrap_line_length, 10);");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt.e4x = (options.e4x === undefined) ? false : options.e4x;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt.end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt.comma_first = (options.comma_first === undefined) ? false : options.comma_first;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// For testing of beautify ignore:start directive");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt.test_output_raw = (options.test_output_raw === undefined) ? false : options.test_output_raw;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// force opt.space_after_anon_function to true if opt.jslint_happy");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("if(opt.jslint_happy) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("opt.space_after_anon_function = true;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("if(options.indent_with_tabs){");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("opt.indent_char = \'\\t\';");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("opt.indent_size = 1;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("opt.eol = opt.eol.replace(/\\\\r/, \'\\r\').replace(/\\\\n/, \'\\n\')");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("//----------------------------------");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("indent_string = \'\';");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("while (opt.indent_size > 0) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("indent_string += opt.indent_char;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("opt.indent_size -= 1;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var preindent_index = 0;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("if(js_source_text && js_source_text.length) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("while ( (js_source_text.charAt(preindent_index) === \' \' ||");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("js_source_text.charAt(preindent_index) === \'\\t\')) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("baseIndentString += js_source_text.charAt(preindent_index);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("preindent_index += 1;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("js_source_text = js_source_text.substring(preindent_index);");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("last_type = \'TK_START_BLOCK\'; // last token type");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("last_last_text = \'\'; // pre-last token text");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("output = new Output(indent_string, baseIndentString);");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// If testing the ignore directive, start with output disable set to true");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("output.raw = opt.test_output_raw;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// Stack of parsing/formatting states, including MODE.");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// We tokenize, parse, and output in an almost purely a forward-only stream of token input");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// and formatted output.  This makes the beautifier less accurate than full parsers");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// but also far more tolerant of syntax errors.");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("//");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// For example, the default mode is MODE.BlockStatement. If we see a \'{\' we push a new frame of type");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// MODE.BlockStatement on the the stack, even though it could be object literal.  If we later");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// encounter a \":\", we\'ll switch to to MODE.ObjectLiteral.  If we then see a \";\",");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// most full parsers would die, but the beautifier gracefully falls back to");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// MODE.BlockStatement and continues on.");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("flag_store = [];");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("set_mode(MODE.BlockStatement);");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.beautify = function() {");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("/*jshint onevar:true */");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var local_token, sweet_code;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("Tokenizer = new tokenizer(js_source_text, opt, indent_string);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("tokens = Tokenizer.tokenize();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("token_pos = 0;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("while (local_token = get_token()) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("for(var i = 0; i < local_token.comments_before.length; i++) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// The cleanest handling of inline comments is to treat them as though they aren\'t there.");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// Just continue formatting and the behavior should be logical.");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// Also ignore unknown tokens.  Again, this should result in better behavior.");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("handle_token(local_token.comments_before[i]);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("handle_token(local_token);");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("last_last_text = flags.last_text;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("last_type = local_token.type;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("flags.last_text = local_token.text;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("token_pos += 1;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("sweet_code = output.get_code();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (opt.end_with_newline) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("sweet_code += \'\\n\';");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (opt.eol != \'\\n\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("sweet_code = sweet_code.replace(/[\\n]/g, opt.eol);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return sweet_code;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("};");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function handle_token(local_token) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var newlines = local_token.newlines;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var keep_whitespace = opt.keep_array_indentation && is_array(flags.mode);");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (keep_whitespace) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("for (i = 0; i < newlines; i += 1) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("print_newline(i > 0);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (opt.max_preserve_newlines && newlines > opt.max_preserve_newlines) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("newlines = opt.max_preserve_newlines;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (opt.preserve_newlines) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (local_token.newlines > 1) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("for (var i = 1; i < newlines; i += 1) {");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("print_newline(true);");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("current_token = local_token;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("handlers[current_token.type]();");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// we could use just string.split, but");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// IE doesn\'t like returning empty strings");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function split_newlines(s) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("//return s.split(/\\x0d\\x0a|\\x0a/);");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("s = s.replace(/\\x0d/g, \'\');");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var out = [],");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("idx = s.indexOf(\"\\n\");");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("while (idx !== -1) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("out.push(s.substring(0, idx));");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("s = s.substring(idx + 1);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("idx = s.indexOf(\"\\n\");");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (s.length) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("out.push(s);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return out;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function allow_wrap_or_preserved_newline(force_linewrap) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("force_linewrap = (force_linewrap === undefined) ? false : force_linewrap;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// Never wrap the first token on a line");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (output.just_added_newline()) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if ((opt.preserve_newlines && current_token.wanted_newline) || force_linewrap) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_newline(false, true);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else if (opt.wrap_line_length) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("var proposed_line_length = output.current_line.get_character_count() + current_token.text.length +");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("(output.space_before_token ? 1 : 0);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (proposed_line_length >= opt.wrap_line_length) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("print_newline(false, true);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function print_newline(force_newline, preserve_statement_flags) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (!preserve_statement_flags) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (flags.last_text !== \';\' && flags.last_text !== \',\' && flags.last_text !== \'=\' && last_type !== \'TK_OPERATOR\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("while (flags.mode === MODE.Statement && !flags.if_block && !flags.do_block) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("restore_mode();");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (output.add_new_line(force_newline)) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("flags.multiline_frame = true;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function print_token_line_indentation() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (output.just_added_newline()) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (opt.keep_array_indentation && is_array(flags.mode) && current_token.wanted_newline) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.current_line.push(current_token.whitespace_before);");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.space_before_token = false;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else if (output.set_indent(flags.indentation_level)) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("flags.line_indent_level = flags.indentation_level;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function print_token(printable_token) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (output.raw) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("output.add_raw_token(current_token)");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (opt.comma_first && last_type === \'TK_COMMA\'");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("&& output.just_added_newline()) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if(output.previous_line.last() === \',\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.previous_line.pop();");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("print_token_line_indentation();");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.add_token(\',\');");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("printable_token = printable_token || current_token.text;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("print_token_line_indentation();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("output.add_token(printable_token);");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function indent() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("flags.indentation_level += 1;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function deindent() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (flags.indentation_level > 0 &&");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("((!flags.parent) || flags.indentation_level > flags.parent.indentation_level))");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("flags.indentation_level -= 1;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function set_mode(mode) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (flags) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("flag_store.push(flags);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("previous_flags = flags;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("previous_flags = create_flags(null, mode);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("flags = create_flags(previous_flags, mode);");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function is_array(mode) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return mode === MODE.ArrayLiteral;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function is_expression(mode) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return in_array(mode, [MODE.Expression, MODE.ForInitializer, MODE.Conditional]);");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function restore_mode() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (flag_store.length > 0) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("previous_flags = flags;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("flags = flag_store.pop();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (previous_flags.mode === MODE.Statement) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.remove_redundant_indentation(previous_flags);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function start_of_object_property() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return flags.parent.mode === MODE.ObjectLiteral && flags.mode === MODE.Statement && (");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("(flags.last_text === \':\' && flags.ternary_depth === 0) || (last_type === \'TK_RESERVED\' && in_array(flags.last_text, [\'get\', \'set\'])));");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function start_of_statement() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("(last_type === \'TK_RESERVED\' && in_array(flags.last_text, [\'var\', \'let\', \'const\']) && current_token.type === \'TK_WORD\') ||");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("(last_type === \'TK_RESERVED\' && flags.last_text === \'do\') ||");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("(last_type === \'TK_RESERVED\' && flags.last_text === \'return\' && !current_token.wanted_newline) ||");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("(last_type === \'TK_RESERVED\' && flags.last_text === \'else\' && !(current_token.type === \'TK_RESERVED\' && current_token.text === \'if\')) ||");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("(last_type === \'TK_END_EXPR\' && (previous_flags.mode === MODE.ForInitializer || previous_flags.mode === MODE.Conditional)) ||");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("(last_type === \'TK_WORD\' && flags.mode === MODE.BlockStatement");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("&& !flags.in_case");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("&& !(current_token.text === \'--\' || current_token.text === \'++\')");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("&& last_last_text !== \'function\'");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("&& current_token.type !== \'TK_WORD\' && current_token.type !== \'TK_RESERVED\') ||");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("(flags.mode === MODE.ObjectLiteral && (");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("(flags.last_text === \':\' && flags.ternary_depth === 0) || (last_type === \'TK_RESERVED\' && in_array(flags.last_text, [\'get\', \'set\']))))");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append(") {");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("set_mode(MODE.Statement);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("indent();");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (last_type === \'TK_RESERVED\' && in_array(flags.last_text, [\'var\', \'let\', \'const\']) && current_token.type === \'TK_WORD\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("flags.declaration_statement = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// Issue #276:");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// If starting a new statement with [if, for, while, do], push to a new line.");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// if (a) if (b) if(c) d(); else e(); else f();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (!start_of_object_property()) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("allow_wrap_or_preserved_newline(");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("current_token.type === \'TK_RESERVED\' && in_array(current_token.text, [\'do\', \'for\', \'if\', \'while\']));");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return true;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return false;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function all_lines_start_with(lines, c) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("for (var i = 0; i < lines.length; i++) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("var line = trim(lines[i]);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (line.charAt(0) !== c) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("return false;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return true;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function each_line_matches_indent(lines, indent) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var i = 0,");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("len = lines.length,");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("line;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("for (; i < len; i++) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("line = lines[i];");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// allow empty lines to pass through");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (line && line.indexOf(indent) !== 0) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("return false;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return true;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function is_special_word(word) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return in_array(word, [\'case\', \'return\', \'do\', \'if\', \'throw\', \'else\']);");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function get_token(offset) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var index = token_pos + (offset || 0);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return (index < 0 || index >= tokens.length) ? null : tokens[index];");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function handle_start_expr() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (start_of_statement()) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// The conditional starts the statement if appropriate.");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var next_mode = MODE.Expression;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (current_token.text === \'[\') {");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (last_type === \'TK_WORD\' || flags.last_text === \')\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// this is array index specifier, break immediately");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// a[x], fn()[x]");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (last_type === \'TK_RESERVED\' && in_array(flags.last_text, Tokenizer.line_starters)) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("set_mode(next_mode);");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("indent();");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (opt.space_in_paren) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("return;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("next_mode = MODE.ArrayLiteral;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (is_array(flags.mode)) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (flags.last_text === \'[\' ||");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("(flags.last_text === \',\' && (last_last_text === \']\' || last_last_text === \'}\'))) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("// ], [ goes to new line");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("// }, [ goes to new line");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("if (!opt.keep_array_indentation) {");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (last_type === \'TK_RESERVED\' && flags.last_text === \'for\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("next_mode = MODE.ForInitializer;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else if (last_type === \'TK_RESERVED\' && in_array(flags.last_text, [\'if\', \'while\'])) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("next_mode = MODE.Conditional;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// next_mode = MODE.Expression;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (flags.last_text === \';\' || last_type === \'TK_START_BLOCK\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else if (last_type === \'TK_END_EXPR\' || last_type === \'TK_START_EXPR\' || last_type === \'TK_END_BLOCK\' || flags.last_text === \'.\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// TODO: Consider whether forcing this is required.  Review failing tests when removed.");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("allow_wrap_or_preserved_newline(current_token.wanted_newline);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// do nothing on (( and )( and ][ and ]( and .(");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else if (!(last_type === \'TK_RESERVED\' && current_token.text === \'(\') && last_type !== \'TK_WORD\' && last_type !== \'TK_OPERATOR\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else if ((last_type === \'TK_RESERVED\' && (flags.last_word === \'function\' || flags.last_word === \'typeof\')) ||");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("(flags.last_text === \'*\' && last_last_text === \'function\')) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// function() vs function ()");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (opt.space_after_anon_function) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else if (last_type === \'TK_RESERVED\' && (in_array(flags.last_text, Tokenizer.line_starters) || flags.last_text === \'catch\')) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (opt.space_before_conditional) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// Should be a space between await and an IIFE");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if(current_token.text === \'(\' && last_type === \'TK_RESERVED\' && flags.last_word === \'await\'){");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// Support of this kind of newline preservation.");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// a = (b &&");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("//     (c || d));");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (current_token.text === \'(\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (last_type === \'TK_EQUALS\' || last_type === \'TK_OPERATOR\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (!start_of_object_property()) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("allow_wrap_or_preserved_newline();");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("set_mode(next_mode);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (opt.space_in_paren) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// In all cases, if we newline while inside an expression it should be indented.");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("indent();");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function handle_end_expr() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// statements inside expressions are not valid syntax, but...");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// statements must all be closed when their container closes");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("while (flags.mode === MODE.Statement) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("restore_mode();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (flags.multiline_frame) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("allow_wrap_or_preserved_newline(current_token.text === \']\' && is_array(flags.mode) && !opt.keep_array_indentation);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (opt.space_in_paren) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (last_type === \'TK_START_EXPR\' && ! opt.space_in_empty_paren) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// () [] no inner space in empty parens like these, ever, ref #320");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.trim();");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.space_before_token = false;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (current_token.text === \']\' && opt.keep_array_indentation) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("restore_mode();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("restore_mode();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("output.remove_redundant_indentation(previous_flags);");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// do {} while () // no statement required after");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (flags.do_while && previous_flags.mode === MODE.Conditional) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("previous_flags.mode = MODE.Expression;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("flags.do_block = false;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("flags.do_while = false;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function handle_start_block() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// Check if this is should be treated as a ObjectLiteral");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var next_token = get_token(1)");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var second_token = get_token(2)");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (second_token && (");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("(second_token.text === \':\' && in_array(next_token.type, [\'TK_STRING\', \'TK_WORD\', \'TK_RESERVED\']))");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("|| (in_array(next_token.text, [\'get\', \'set\']) && in_array(second_token.type, [\'TK_WORD\', \'TK_RESERVED\']))");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append(")) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// We don\'t support TypeScript,but we didn\'t break it for a very long time.");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// We\'ll try to keep not breaking it.");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (!in_array(last_last_text, [\'class\',\'interface\'])) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("set_mode(MODE.ObjectLiteral);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("set_mode(MODE.BlockStatement);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("set_mode(MODE.BlockStatement);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var empty_braces = !next_token.comments_before.length &&  next_token.text === \'}\';");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var empty_anonymous_function = empty_braces && flags.last_word === \'function\' &&");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("last_type === \'TK_END_EXPR\';");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (opt.brace_style === \"expand\" ||");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("(opt.brace_style === \"none\" && current_token.wanted_newline)) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (last_type !== \'TK_OPERATOR\' &&");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("(empty_anonymous_function ||");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("last_type === \'TK_EQUALS\' ||");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("(last_type === \'TK_RESERVED\' && is_special_word(flags.last_text) && flags.last_text !== \'else\'))) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("print_newline(false, true);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else { // collapse");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (last_type !== \'TK_OPERATOR\' && last_type !== \'TK_START_EXPR\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (last_type === \'TK_START_BLOCK\') {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// if TK_OPERATOR or TK_START_EXPR");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (is_array(previous_flags.mode) && flags.last_text === \',\') {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("if (last_last_text === \'}\') {");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("// }, { in array context");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("print_newline(); // [a, b, c, {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("indent();");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function handle_end_block() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// statements must all be closed when their container closes");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("while (flags.mode === MODE.Statement) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("restore_mode();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var empty_braces = last_type === \'TK_START_BLOCK\';");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (opt.brace_style === \"expand\") {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (!empty_braces) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// skip {}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (!empty_braces) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (is_array(flags.mode) && opt.keep_array_indentation) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("// we REALLY need a newline here, but newliner would skip that");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("opt.keep_array_indentation = false;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("opt.keep_array_indentation = true;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("restore_mode();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function handle_word() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (current_token.type === \'TK_RESERVED\' && flags.mode !== MODE.ObjectLiteral &&");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("in_array(current_token.text, [\'set\', \'get\'])) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("current_token.type = \'TK_WORD\';");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (current_token.type === \'TK_RESERVED\' && flags.mode === MODE.ObjectLiteral) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("var next_token = get_token(1);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (next_token.text == \':\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("current_token.type = \'TK_WORD\';");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (start_of_statement()) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// The conditional starts the statement if appropriate.");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else if (current_token.wanted_newline && !is_expression(flags.mode) &&");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("(last_type !== \'TK_OPERATOR\' || (flags.last_text === \'--\' || flags.last_text === \'++\')) &&");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("last_type !== \'TK_EQUALS\' &&");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("(opt.preserve_newlines || !(last_type === \'TK_RESERVED\' && in_array(flags.last_text, [\'var\', \'let\', \'const\', \'set\', \'get\'])))) {");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (flags.do_block && !flags.do_while) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (current_token.type === \'TK_RESERVED\' && current_token.text === \'while\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// do {} ## while ()");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("flags.do_while = true;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("return;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// do {} should always have while as the next word.");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// if we don\'t see the expected while, recover");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("flags.do_block = false;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// if may be followed by else, or not");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// Bare/inline ifs are tricky");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// Need to unwind the modes correctly: if (a) if (b) c(); else d(); else e();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (flags.if_block) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (!flags.else_block && (current_token.type === \'TK_RESERVED\' && current_token.text === \'else\')) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("flags.else_block = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("while (flags.mode === MODE.Statement) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("restore_mode();");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("flags.if_block = false;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("flags.else_block = false;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (current_token.type === \'TK_RESERVED\' && (current_token.text === \'case\' || (current_token.text === \'default\' && flags.in_case_statement))) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (flags.case_body || opt.jslint_happy) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// switch cases following one another");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("deindent();");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("flags.case_body = false;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("flags.in_case = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("flags.in_case_statement = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (current_token.type === \'TK_RESERVED\' && current_token.text === \'function\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (in_array(flags.last_text, [\'}\', \';\']) || (output.just_added_newline() && ! in_array(flags.last_text, [\'[\', \'{\', \':\', \'=\', \',\']))) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// make sure there is a nice clean space of at least one blank line");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// before a new function definition");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if ( !output.just_added_blankline() && !current_token.comments_before.length) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("print_newline(true);");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (last_type === \'TK_RESERVED\' || last_type === \'TK_WORD\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (last_type === \'TK_RESERVED\' && in_array(flags.last_text, [\'get\', \'set\', \'new\', \'return\', \'export\', \'async\'])) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("} else if (last_type === \'TK_RESERVED\' && flags.last_text === \'default\' && last_last_text === \'export\') {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else if (last_type === \'TK_OPERATOR\' || flags.last_text === \'=\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// foo = function");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else if (!flags.multiline_frame && (is_expression(flags.mode) || is_array(flags.mode))) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// (function");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (last_type === \'TK_COMMA\' || last_type === \'TK_START_EXPR\' || last_type === \'TK_EQUALS\' || last_type === \'TK_OPERATOR\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (!start_of_object_property()) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("allow_wrap_or_preserved_newline();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (current_token.type === \'TK_RESERVED\' &&  in_array(current_token.text, [\'function\', \'get\', \'set\'])) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("flags.last_word = current_token.text;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("prefix = \'NONE\';");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (last_type === \'TK_END_BLOCK\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (!(current_token.type === \'TK_RESERVED\' && in_array(current_token.text, [\'else\', \'catch\', \'finally\']))) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("prefix = \'NEWLINE\';");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (opt.brace_style === \"expand\" ||");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("opt.brace_style === \"end-expand\" ||");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("(opt.brace_style === \"none\" && current_token.wanted_newline)) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("prefix = \'NEWLINE\';");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("prefix = \'SPACE\';");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else if (last_type === \'TK_SEMICOLON\' && flags.mode === MODE.BlockStatement) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// TODO: Should this be for STATEMENT as well?");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("prefix = \'NEWLINE\';");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else if (last_type === \'TK_SEMICOLON\' && is_expression(flags.mode)) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("prefix = \'SPACE\';");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else if (last_type === \'TK_STRING\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("prefix = \'NEWLINE\';");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else if (last_type === \'TK_RESERVED\' || last_type === \'TK_WORD\' ||");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("(flags.last_text === \'*\' && last_last_text === \'function\')) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("prefix = \'SPACE\';");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else if (last_type === \'TK_START_BLOCK\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("prefix = \'NEWLINE\';");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else if (last_type === \'TK_END_EXPR\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("prefix = \'NEWLINE\';");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (current_token.type === \'TK_RESERVED\' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== \')\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (flags.last_text === \'else\' || flags.last_text === \'export\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("prefix = \'SPACE\';");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("prefix = \'NEWLINE\';");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (current_token.type === \'TK_RESERVED\' && in_array(current_token.text, [\'else\', \'catch\', \'finally\'])) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (last_type !== \'TK_END_BLOCK\' ||");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("opt.brace_style === \"expand\" ||");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("opt.brace_style === \"end-expand\" ||");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("(opt.brace_style === \"none\" && current_token.wanted_newline)) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.trim(true);");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("var line = output.current_line;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// If we trimmed and there\'s something other than a close block before us");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// put a newline back in.  Handles \'} // comment\' scenario.");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (line.last() !== \'}\') {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else if (prefix === \'NEWLINE\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (last_type === \'TK_RESERVED\' && is_special_word(flags.last_text)) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// no newline between \'return nnn\'");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else if (last_type !== \'TK_END_EXPR\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if ((last_type !== \'TK_START_EXPR\' || !(current_token.type === \'TK_RESERVED\' && in_array(current_token.text, [\'var\', \'let\', \'const\']))) && flags.last_text !== \':\') {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("// no need to force newline on \'var\': for (var x = 0...)");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("if (current_token.type === \'TK_RESERVED\' && current_token.text === \'if\' && flags.last_text === \'else\') {");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("// no newline for } else if {");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else if (current_token.type === \'TK_RESERVED\' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== \')\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else if (flags.multiline_frame && is_array(flags.mode) && flags.last_text === \',\' && last_last_text === \'}\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_newline(); // }, in lists get a newline treatment");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else if (prefix === \'SPACE\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("flags.last_word = current_token.text;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (current_token.type === \'TK_RESERVED\' && current_token.text === \'do\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("flags.do_block = true;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (current_token.type === \'TK_RESERVED\' && current_token.text === \'if\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("flags.if_block = true;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function handle_semicolon() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (start_of_statement()) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// The conditional starts the statement if appropriate.");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// Semicolon can be the start (and end) of a statement");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("output.space_before_token = false;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("while (flags.mode === MODE.Statement && !flags.if_block && !flags.do_block) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("restore_mode();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function handle_string() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (start_of_statement()) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// The conditional starts the statement if appropriate.");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// One difference - strings want at least a space before");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else if (last_type === \'TK_RESERVED\' || last_type === \'TK_WORD\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else if (last_type === \'TK_COMMA\' || last_type === \'TK_START_EXPR\' || last_type === \'TK_EQUALS\' || last_type === \'TK_OPERATOR\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (!start_of_object_property()) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("allow_wrap_or_preserved_newline();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function handle_equals() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (start_of_statement()) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// The conditional starts the statement if appropriate.");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (flags.declaration_statement) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// just got an \'=\' in a var-line, different formatting/line-breaking, etc will now be done");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("flags.declaration_assignment = true;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function handle_comma() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (flags.declaration_statement) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (is_expression(flags.parent.mode)) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// do not break on comma, for(var a = 1, b = 2)");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("flags.declaration_assignment = false;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (flags.declaration_assignment) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("flags.declaration_assignment = false;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("print_newline(false, true);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// for comma-first, we want to allow a newline before the comma");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// to turn into a newline after the comma, which we will fixup later");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (opt.comma_first) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("allow_wrap_or_preserved_newline();");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (flags.mode === MODE.ObjectLiteral ||");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("(flags.mode === MODE.Statement && flags.parent.mode === MODE.ObjectLiteral)) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (flags.mode === MODE.Statement) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("restore_mode();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// EXPR or DO_BLOCK");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// for comma-first, we want to allow a newline before the comma");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// to turn into a newline after the comma, which we will fixup later");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (opt.comma_first) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("allow_wrap_or_preserved_newline();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function handle_operator() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (start_of_statement()) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// The conditional starts the statement if appropriate.");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (last_type === \'TK_RESERVED\' && is_special_word(flags.last_text)) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// \"return\" had a special handling in TK_WORD. Now we need to return the favor");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// hack for actionscript\'s import .*;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (current_token.text === \'*\' && last_type === \'TK_DOT\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (current_token.text === \':\' && flags.in_case) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("flags.case_body = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("indent();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("flags.in_case = false;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (current_token.text === \'::\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// no spaces around exotic namespacing syntax operator");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// Allow line wrapping between operators");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (last_type === \'TK_OPERATOR\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("allow_wrap_or_preserved_newline();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var space_before = true;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var space_after = true;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (in_array(current_token.text, [\'--\', \'++\', \'!\', \'~\']) || (in_array(current_token.text, [\'-\', \'+\']) && (in_array(last_type, [\'TK_START_BLOCK\', \'TK_START_EXPR\', \'TK_EQUALS\', \'TK_OPERATOR\']) || in_array(flags.last_text, Tokenizer.line_starters) || flags.last_text === \',\'))) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// unary operators (and binary +/- pretending to be unary) special cases");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("space_before = false;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("space_after = false;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// if there is a newline between -- or ++ and anything else we should preserve it.");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (current_token.wanted_newline && (current_token.text === \'--\' || current_token.text === \'++\')) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("print_newline(false, true);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (flags.last_text === \';\' && is_expression(flags.mode)) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// for (;; ++i)");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("//        ^^^");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("space_before = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (last_type === \'TK_RESERVED\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("space_before = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else if (last_type === \'TK_END_EXPR\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("space_before = !(flags.last_text === \']\' && (current_token.text === \'--\' || current_token.text === \'++\'));");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else if (last_type === \'TK_OPERATOR\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// a++ + ++b;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// a - -b");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("space_before = in_array(current_token.text, [\'--\', \'-\', \'++\', \'+\']) && in_array(flags.last_text, [\'--\', \'-\', \'++\', \'+\']);");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// + and - are not unary when preceeded by -- or ++ operator");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// a-- + b");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// a * +b");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// a - -b");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (in_array(current_token.text, [\'+\', \'-\']) && in_array(flags.last_text, [\'--\', \'++\'])) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("space_after = true;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if ((flags.mode === MODE.BlockStatement || flags.mode === MODE.Statement) && (flags.last_text === \'{\' || flags.last_text === \';\')) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// { foo; --i }");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// foo(); --bar;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else if (current_token.text === \':\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (flags.ternary_depth === 0) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// Colon is invalid javascript outside of ternary and object, but do our best to guess what was meant.");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("space_before = false;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("flags.ternary_depth -= 1;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else if (current_token.text === \'?\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("flags.ternary_depth += 1;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else if (current_token.text === \'*\' && last_type === \'TK_RESERVED\' && flags.last_text === \'function\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("space_before = false;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("space_after = false;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("output.space_before_token = output.space_before_token || space_before;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("output.space_before_token = space_after;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function handle_block_comment() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (output.raw) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("output.add_raw_token(current_token)");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (current_token.directives && current_token.directives[\'preserve\'] === \'end\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// If we\'re testing the raw output behavior, do not allow a directive to turn it off.");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (!opt.test_output_raw) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("output.raw = false;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (current_token.directives) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_newline(false, true);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (current_token.directives[\'preserve\'] === \'start\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.raw = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_newline(false, true);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// inline block");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (!acorn.newline.test(current_token.text) && !current_token.wanted_newline) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var lines = split_newlines(current_token.text);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var j; // iterator for this case");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var javadoc = false;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var starless = false;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var lastIndent = current_token.whitespace_before;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var lastIndentLength = lastIndent.length;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// block comment starts with a new line");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("print_newline(false, true);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (lines.length > 1) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (all_lines_start_with(lines.slice(1), \'*\')) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("javadoc = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("else if (each_line_matches_indent(lines.slice(1), lastIndent)) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("starless = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// first line always indented");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("print_token(lines[0]);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("for (j = 1; j < lines.length; j++) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_newline(false, true);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (javadoc) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// javadoc: reformat and re-indent");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("print_token(\' \' + ltrim(lines[j]));");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else if (starless && lines[j].length > lastIndentLength) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// starless: re-indent non-empty content, avoiding trim");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("print_token(lines[j].substring(lastIndentLength));");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// normal comments output raw");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("output.add_token(lines[j]);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// for comments of more than one line, make sure there\'s a new line after");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("print_newline(false, true);");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function handle_comment() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (current_token.wanted_newline) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_newline(false, true);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("output.trim(true);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("print_newline(false, true);");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function handle_dot() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (start_of_statement()) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// The conditional starts the statement if appropriate.");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (last_type === \'TK_RESERVED\' && is_special_word(flags.last_text)) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("output.space_before_token = true;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// allow preserved newlines before dots in general");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// force newlines on dots after close paren when break_chained - for bar().baz()");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("allow_wrap_or_preserved_newline(flags.last_text === \')\' && opt.break_chained_methods);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function handle_unknown() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("print_token();");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (current_token.text[current_token.text.length - 1] === \'\\n\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("print_newline();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function handle_eof() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// Unwind any open statements");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("while (flags.mode === MODE.Statement) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("restore_mode();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("function OutputLine(parent) {");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var _character_count = 0;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// use indent_count as a marker for lines that have preserved indentation");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var _indent_count = -1;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var _items = [];");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var _empty = true;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.set_indent = function(level) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("_character_count = parent.baseIndentLength + level * parent.indent_length");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("_indent_count = level;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.get_character_count = function() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return _character_count;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.is_empty = function() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return _empty;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.last = function() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (!this._empty) {");
        _builder.append("\r\n");
        _builder.append("              ");
        _builder.append("return _items[_items.length - 1];");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("              ");
        _builder.append("return null;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.push = function(input) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("_items.push(input);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("_character_count += input.length;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("_empty = false;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.pop = function() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var item = null;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (!_empty) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("item = _items.pop();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("_character_count -= item.length;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("_empty = _items.length === 0;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return item;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.remove_indent = function() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (_indent_count > 0) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("_indent_count -= 1;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("_character_count -= parent.indent_length");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.trim = function() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("while (this.last() === \' \') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("var item = _items.pop();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("_character_count -= 1;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("_empty = _items.length === 0;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.toString = function() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var result = \'\';");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (!this._empty) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (_indent_count >= 0) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("result = parent.indent_cache[_indent_count];");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("result += _items.join(\'\')");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return result;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("function Output(indent_string, baseIndentString) {");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("baseIndentString = baseIndentString || \'\';");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.indent_cache = [ baseIndentString ];");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.baseIndentLength = baseIndentString.length;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.indent_length = indent_string.length;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.raw = false;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var lines =[];");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.baseIndentString = baseIndentString;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.indent_string = indent_string;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.previous_line = null;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.current_line = null;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.space_before_token = false;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.add_outputline = function() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("this.previous_line = this.current_line;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("this.current_line = new OutputLine(this);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("lines.push(this.current_line);");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// initialize");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.add_outputline();");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.get_line_number = function() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return lines.length;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// Using object instead of string to allow for later expansion of info about each line");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.add_new_line = function(force_newline) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (this.get_line_number() === 1 && this.just_added_newline()) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return false; // no newline on start of file");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (force_newline || !this.just_added_newline()) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (!this.raw) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("this.add_outputline();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return true;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return false;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.get_code = function() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var sweet_code = lines.join(\'\\n\').replace(/[\\r\\n\\t ]+$/, \'\');");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return sweet_code;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.set_indent = function(level) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// Never indent your first output indent at the start of the file");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (lines.length > 1) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("while(level >= this.indent_cache.length) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("this.indent_cache.push(this.indent_cache[this.indent_cache.length - 1] + this.indent_string);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("this.current_line.set_indent(level);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return true;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("this.current_line.set_indent(0);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return false;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.add_raw_token = function(token) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("for (var x = 0; x < token.newlines; x++) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("this.add_outputline();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("this.current_line.push(token.whitespace_before);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("this.current_line.push(token.text);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("this.space_before_token = false;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.add_token = function(printable_token) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("this.add_space_before_token();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("this.current_line.push(printable_token);");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.add_space_before_token = function() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (this.space_before_token && !this.just_added_newline()) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("this.current_line.push(\' \');");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("this.space_before_token = false;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.remove_redundant_indentation = function (frame) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// This implementation is effective but has some issues:");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("//     - can cause line wrap to happen too soon due to indent removal");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("//           after wrap points are calculated");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// These issues are minor compared to ugly indentation.");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (frame.multiline_frame ||");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("frame.mode === MODE.ForInitializer ||");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("frame.mode === MODE.Conditional) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// remove one indent from each line inside this section");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var index = frame.start_line_index;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var line;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var output_length = lines.length;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("while (index < output_length) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("lines[index].remove_indent();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("index++;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.trim = function(eat_newlines) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("this.current_line.trim(indent_string, baseIndentString);");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("while (eat_newlines && lines.length > 1 &&");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("this.current_line.is_empty()) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("lines.pop();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("this.current_line = lines[lines.length - 1]");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("this.current_line.trim();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("this.previous_line = lines.length > 1 ? lines[lines.length - 2] : null;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.just_added_newline = function() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return this.current_line.is_empty();");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.just_added_blankline = function() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (this.just_added_newline()) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (lines.length === 1) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("return true; // start of the file and newline = blank");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("var line = lines[lines.length - 2];");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return line.is_empty();");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return false;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("var Token = function(type, text, newlines, whitespace_before, mode, parent) {");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.type = type;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.text = text;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.comments_before = [];");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.newlines = newlines || 0;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.wanted_newline = newlines > 0;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.whitespace_before = whitespace_before || \'\';");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.parent = null;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.directives = null;");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("function tokenizer(input, opts, indent_string) {");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var whitespace = \"\\n\\r\\t \".split(\'\');");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var digit = /[0-9]/;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var digit_hex = /[0123456789abcdefABCDEF]/;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var punct = (\'+ - * / % & ++ -- = += -= *= /= %= == === != !== > < >= <= >> << >>> >>>= >>= <<= && &= | || ! ~ , : ? ^ ^= |= :: =>\').split(\' \'); ");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// words which should always start on new line.");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.line_starters = \'continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export\'.split(\',\');");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var reserved_words = this.line_starters.concat([\'do\', \'in\', \'else\', \'get\', \'set\', \'new\', \'catch\', \'finally\', \'typeof\', \'yield\', \'async\', \'await\']);");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("//  /* ... */ comment ends with nearest */ or end of file");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var block_comment_pattern = /([\\s\\S]*?)((?:\\*\\/)|$)/g;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// comment ends just before nearest linefeed or end of file");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var comment_pattern = /([^\\n\\r\\u2028\\u2029]*)/g;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var directives_block_pattern = /\\/\\* beautify( \\w+[:]\\w+)+ \\*\\//g;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var directive_pattern = / (\\w+)[:](\\w+)/g;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var directives_end_ignore_pattern = /([\\s\\S]*?)((?:\\/\\*\\sbeautify\\signore:end\\s\\*\\/)|$)/g;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var template_pattern = /((<\\?php|<\\?=)[\\s\\S]*?\\?>)|(<%[\\s\\S]*?%>)/g");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var n_newlines, whitespace_before_token, in_html_comment, tokens, parser_pos;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("var input_length;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("this.tokenize = function() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("// cache the source\'s length.");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("input_length = input.length");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("parser_pos = 0;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("in_html_comment = false");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("tokens = [];");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var next, last;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var token_values;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var open = null;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var open_stack = [];");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var comments = [];");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("while (!(last && last.type === \'TK_EOF\')) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("token_values = tokenize_next();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("while(next.type === \'TK_COMMENT\' || next.type === \'TK_BLOCK_COMMENT\' || next.type === \'TK_UNKNOWN\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (next.type === \'TK_BLOCK_COMMENT\') {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("next.directives = token_values[2];");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("comments.push(next);");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("token_values = tokenize_next();");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (comments.length) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("next.comments_before = comments;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("comments = [];");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (next.type === \'TK_START_BLOCK\' || next.type === \'TK_START_EXPR\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("next.parent = last;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("open_stack.push(open);");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("open = next;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}  else if ((next.type === \'TK_END_BLOCK\' || next.type === \'TK_END_EXPR\') &&");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("(open && (");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("(next.text === \']\' && open.text === \'[\') ||");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("(next.text === \')\' && open.text === \'(\') ||");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("(next.text === \'}\' && open.text === \'{\')))) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("next.parent = open.parent;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("open = open_stack.pop();");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("tokens.push(next);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("last = next;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return tokens;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function get_directives (text) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (!text.match(directives_block_pattern)) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return null;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var directives = {};");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("directive_pattern.lastIndex = 0;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var directive_match = directive_pattern.exec(text);");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("while (directive_match) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("directives[directive_match[1]] = directive_match[2];");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("directive_match = directive_pattern.exec(text);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return directives;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function tokenize_next() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var i, resulting_string;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var whitespace_on_this_line = [];");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("n_newlines = 0;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("whitespace_before_token = \'\';");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (parser_pos >= input_length) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return [\'\', \'TK_EOF\'];");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var last_token;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (tokens.length) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("last_token = tokens[tokens.length-1];");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// For the sake of tokenizing we can pretend that there was on open brace to start");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("last_token = new Token(\'TK_START_BLOCK\', \'{\');");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var c = input.charAt(parser_pos);");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("parser_pos += 1;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("while (in_array(c, whitespace)) {");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (acorn.newline.test(c)) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (!(c === \'\\n\' && input.charAt(parser_pos-2) === \'\\r\')) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("n_newlines += 1;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("whitespace_on_this_line = [];");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("whitespace_on_this_line.push(c);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (parser_pos >= input_length) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("return [\'\', \'TK_EOF\'];");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("c = input.charAt(parser_pos);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("parser_pos += 1;");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if(whitespace_on_this_line.length) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("whitespace_before_token = whitespace_on_this_line.join(\'\');");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (digit.test(c)) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("var allow_decimal = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("var allow_e = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("var local_digit = digit;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (c === \'0\' && parser_pos < input_length && /[Xx]/.test(input.charAt(parser_pos))) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// switch to hex number, no decimal or e, just hex digits");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("allow_decimal = false;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("allow_e = false;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("c += input.charAt(parser_pos);");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("parser_pos += 1;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("local_digit = digit_hex");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// we know this first loop will run.  It keeps the logic simpler.");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("c = \'\';");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("parser_pos -= 1");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// Add the digits");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("while (parser_pos < input_length && local_digit.test(input.charAt(parser_pos))) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("c += input.charAt(parser_pos);");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("parser_pos += 1;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (allow_decimal && parser_pos < input_length && input.charAt(parser_pos) === \'.\') {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("c += input.charAt(parser_pos);");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("parser_pos += 1;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("allow_decimal = false;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (allow_e && parser_pos < input_length && /[Ee]/.test(input.charAt(parser_pos))) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("c += input.charAt(parser_pos);");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("parser_pos += 1;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("if (parser_pos < input_length && /[+-]/.test(input.charAt(parser_pos))) {");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("c += input.charAt(parser_pos);");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("parser_pos += 1;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("allow_e = false;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("allow_decimal = false;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return [c, \'TK_WORD\'];");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (acorn.isIdentifierStart(input.charCodeAt(parser_pos-1))) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (parser_pos < input_length) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("while (acorn.isIdentifierChar(input.charCodeAt(parser_pos))) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("c += input.charAt(parser_pos);");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("parser_pos += 1;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("if (parser_pos === input_length) {");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("break;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (!(last_token.type === \'TK_DOT\' ||");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("(last_token.type === \'TK_RESERVED\' && in_array(last_token.text, [\'set\', \'get\'])))");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("&& in_array(c, reserved_words)) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (c === \'in\') { // hack for \'in\' operator");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("return [c, \'TK_OPERATOR\'];");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("return [c, \'TK_RESERVED\'];");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return [c, \'TK_WORD\'];");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (c === \'(\' || c === \'[\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return [c, \'TK_START_EXPR\'];");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (c === \')\' || c === \']\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return [c, \'TK_END_EXPR\'];");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (c === \'{\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return [c, \'TK_START_BLOCK\'];");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (c === \'}\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return [c, \'TK_END_BLOCK\'];");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (c === \';\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return [c, \'TK_SEMICOLON\'];");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (c === \'/\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("var comment = \'\';");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// peek for comment /* ... */");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (input.charAt(parser_pos) === \'*\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("parser_pos += 1;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("block_comment_pattern.lastIndex = parser_pos;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("var comment_match = block_comment_pattern.exec(input);");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("comment = \'/*\' + comment_match[0];");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("parser_pos += comment_match[0].length;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("var directives = get_directives(comment);");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (directives && directives[\'ignore\'] === \'start\') {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("directives_end_ignore_pattern.lastIndex = parser_pos;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("comment_match = directives_end_ignore_pattern.exec(input)");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("comment += comment_match[0];");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("parser_pos += comment_match[0].length;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("comment = comment.replace(acorn.lineBreak, \'\\n\');");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("return [comment, \'TK_BLOCK_COMMENT\', directives];");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// peek for comment // ...");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (input.charAt(parser_pos) === \'/\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("parser_pos += 1;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("comment_pattern.lastIndex = parser_pos;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("var comment_match = comment_pattern.exec(input);");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("comment = \'//\' + comment_match[0];");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("parser_pos += comment_match[0].length;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("return [comment, \'TK_COMMENT\'];");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (c === \'`\' || c === \"\'\" || c === \'\"\' || // string");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("(");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("(c === \'/\') || // regexp");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("(opts.e4x && c === \"<\" && input.slice(parser_pos - 1).match(/^<([-a-zA-Z:0-9_.]+|{[^{}]*}|!\\[CDATA\\[[\\s\\S]*?\\]\\])(\\s+[-a-zA-Z:0-9_.]+\\s*=\\s*(\'[^\']*\'|\"[^\"]*\"|{.*?}))*\\s*(\\/?)\\s*>/)) // xml");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append(") && ( // regex and xml can only appear in specific locations during parsing");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("(last_token.type === \'TK_RESERVED\' && in_array(last_token.text , [\'return\', \'case\', \'throw\', \'else\', \'do\', \'typeof\', \'yield\'])) ||");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("(last_token.type === \'TK_END_EXPR\' && last_token.text === \')\' &&");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("last_token.parent && last_token.parent.type === \'TK_RESERVED\' && in_array(last_token.parent.text, [\'if\', \'while\', \'for\'])) ||");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("(in_array(last_token.type, [\'TK_COMMENT\', \'TK_START_EXPR\', \'TK_START_BLOCK\',");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("\'TK_END_BLOCK\', \'TK_OPERATOR\', \'TK_EQUALS\', \'TK_EOF\', \'TK_SEMICOLON\', \'TK_COMMA\'");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("]))");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append(")) {");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("var sep = c,");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("esc = false,");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("has_char_escapes = false;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("resulting_string = c;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (sep === \'/\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("//");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// handle regexp");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("//");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("var in_char_class = false;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("while (parser_pos < input_length &&");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("((esc || in_char_class || input.charAt(parser_pos) !== sep) &&");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("!acorn.newline.test(input.charAt(parser_pos)))) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("resulting_string += input.charAt(parser_pos);");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("if (!esc) {");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("esc = input.charAt(parser_pos) === \'\\\\\';");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("if (input.charAt(parser_pos) === \'[\') {");
        _builder.append("\r\n");
        _builder.append("                                ");
        _builder.append("in_char_class = true;");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("} else if (input.charAt(parser_pos) === \']\') {");
        _builder.append("\r\n");
        _builder.append("                                ");
        _builder.append("in_char_class = false;");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("esc = false;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("parser_pos += 1;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else if (opts.e4x && sep === \'<\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("//");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// handle e4x xml literals");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("//");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("var xmlRegExp = /<(\\/?)([-a-zA-Z:0-9_.]+|{[^{}]*}|!\\[CDATA\\[[\\s\\S]*?\\]\\])(\\s+[-a-zA-Z:0-9_.]+\\s*=\\s*(\'[^\']*\'|\"[^\"]*\"|{.*?}))*\\s*(\\/?)\\s*>/g;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("var xmlStr = input.slice(parser_pos - 1);");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("var match = xmlRegExp.exec(xmlStr);");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (match && match.index === 0) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("var rootTag = match[2];");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("var depth = 0;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("while (match) {");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("var isEndTag = !! match[1];");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("var tagName = match[2];");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("var isSingletonTag = ( !! match[match.length - 1]) || (tagName.slice(0, 8) === \"![CDATA[\");");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("if (tagName === rootTag && !isSingletonTag) {");
        _builder.append("\r\n");
        _builder.append("                                ");
        _builder.append("if (isEndTag) {");
        _builder.append("\r\n");
        _builder.append("                                    ");
        _builder.append("--depth;");
        _builder.append("\r\n");
        _builder.append("                                ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                                    ");
        _builder.append("++depth;");
        _builder.append("\r\n");
        _builder.append("                                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("if (depth <= 0) {");
        _builder.append("\r\n");
        _builder.append("                                ");
        _builder.append("break;");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("match = xmlRegExp.exec(xmlStr);");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("var xmlLength = match ? match.index + match[0].length : xmlStr.length;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("xmlStr = xmlStr.slice(0, xmlLength);");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("parser_pos += xmlLength - 1;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("xmlStr = xmlStr.replace(acorn.lineBreak, \'\\n\');");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("return [xmlStr, \"TK_STRING\"];");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("//");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// handle string");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("//");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// Template strings can travers lines without escape characters.");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// Other strings cannot");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("while (parser_pos < input_length &&");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("(esc || (input.charAt(parser_pos) !== sep &&");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("(sep === \'`\' || !acorn.newline.test(input.charAt(parser_pos)))))) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("// Handle \\r\\n linebreaks after escapes or in template strings");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("if ((esc || sep === \'`\') && acorn.newline.test(input.charAt(parser_pos))) {");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("if (input.charAt(parser_pos) === \'\\r\' && input.charAt(parser_pos + 1) === \'\\n\') {");
        _builder.append("\r\n");
        _builder.append("                                ");
        _builder.append("parser_pos += 1;");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("resulting_string += \'\\n\';");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("resulting_string += input.charAt(parser_pos);");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("if (esc) {");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("if (input.charAt(parser_pos) === \'x\' || input.charAt(parser_pos) === \'u\') {");
        _builder.append("\r\n");
        _builder.append("                                ");
        _builder.append("has_char_escapes = true;");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("esc = false;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("esc = input.charAt(parser_pos) === \'\\\\\';");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("parser_pos += 1;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (has_char_escapes && opts.unescape_strings) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("resulting_string = unescape_string(resulting_string);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (parser_pos < input_length && input.charAt(parser_pos) === sep) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("resulting_string += sep;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("parser_pos += 1;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (sep === \'/\') {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("// regexps may have modifiers /regexp/MOD , so fetch those, too");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("// Only [gim] are valid, but if the user puts in garbage, do what we can to take it.");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("while (parser_pos < input_length && acorn.isIdentifierStart(input.charCodeAt(parser_pos))) {");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("resulting_string += input.charAt(parser_pos);");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("parser_pos += 1;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return [resulting_string, \'TK_STRING\'];");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (c === \'#\') {");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (tokens.length === 0 && input.charAt(parser_pos) === \'!\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("// shebang");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("resulting_string = c;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("while (parser_pos < input_length && c !== \'\\n\') {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("c = input.charAt(parser_pos);");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("resulting_string += c;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("parser_pos += 1;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("return [trim(resulting_string) + \'\\n\', \'TK_UNKNOWN\'];");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// Spidermonkey-specific sharp variables for circular references");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// https://developer.mozilla.org/En/Sharp_variables_in_JavaScript");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("// http://mxr.mozilla.org/mozilla-central/source/js/src/jsscan.cpp around line 1935");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("var sharp = \'#\';");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (parser_pos < input_length && digit.test(input.charAt(parser_pos))) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("do {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("c = input.charAt(parser_pos);");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("sharp += c;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("parser_pos += 1;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("} while (parser_pos < input_length && c !== \'#\' && c !== \'=\');");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (c === \'#\') {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("//");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("} else if (input.charAt(parser_pos) === \'[\' && input.charAt(parser_pos + 1) === \']\') {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("sharp += \'[]\';");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("parser_pos += 2;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("} else if (input.charAt(parser_pos) === \'{\' && input.charAt(parser_pos + 1) === \'}\') {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("sharp += \'{}\';");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("parser_pos += 2;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("return [sharp, \'TK_WORD\'];");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (c === \'<\' && (input.charAt(parser_pos) === \'?\' || input.charAt(parser_pos) === \'%\')) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("template_pattern.lastIndex = parser_pos - 1;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("var template_match = template_pattern.exec(input);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if(template_match) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("c = template_match[0];");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("parser_pos += c.length - 1;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("c = c.replace(acorn.lineBreak, \'\\n\');");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("return [c, \'TK_STRING\'];");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (c === \'<\' && input.substring(parser_pos - 1, parser_pos + 3) === \'<!--\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("parser_pos += 3;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("c = \'<!--\';");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("while (!acorn.newline.test(input.charAt(parser_pos)) && parser_pos < input_length) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("c += input.charAt(parser_pos);");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("parser_pos++;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("in_html_comment = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return [c, \'TK_COMMENT\'];");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (c === \'-\' && in_html_comment && input.substring(parser_pos - 1, parser_pos + 2) === \'-->\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("in_html_comment = false;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("parser_pos += 2;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return [\'-->\', \'TK_COMMENT\'];");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (c === \'.\') {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("return [c, \'TK_DOT\'];");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("if (in_array(c, punct)) {");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("while (parser_pos < input_length && in_array(c + input.charAt(parser_pos), punct)) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("c += input.charAt(parser_pos);");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("parser_pos += 1;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (parser_pos >= input_length) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("break;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (c === \',\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("return [c, \'TK_COMMA\'];");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else if (c === \'=\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("return [c, \'TK_EQUALS\'];");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("return [c, \'TK_OPERATOR\'];");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return [c, \'TK_UNKNOWN\'];");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("function unescape_string(s) {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("var esc = false,");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("out = \'\',");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("pos = 0,");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("s_hex = \'\',");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("escaped = 0,");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("c;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("while (esc || pos < s.length) {");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("c = s.charAt(pos);");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("pos++;");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("if (esc) {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("esc = false;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (c === \'x\') {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("// simple hex-escape \\x24");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("s_hex = s.substr(pos, 2);");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("pos += 2;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("} else if (c === \'u\') {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("// unicode-escape, \\u2134");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("s_hex = s.substr(pos, 4);");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("pos += 4;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("// some common escape, e.g \\n");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("out += \'\\\\\' + c;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("continue;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (!s_hex.match(/^[0123456789abcdefABCDEF]+$/)) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("// some weird escaping, bail out,");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("// leaving whole string intact");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("return s;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("escaped = parseInt(s_hex, 16);");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("if (escaped >= 0x00 && escaped < 0x20) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("// leave 0x00...0x1f escaped");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("if (c === \'x\') {");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("out += \'\\\\x\' + s_hex;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                            ");
        _builder.append("out += \'\\\\u\' + s_hex;");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("continue;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("} else if (escaped === 0x22 || escaped === 0x27 || escaped === 0x5c) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("// single-quote, apostrophe, backslash - escape these");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("out += \'\\\\\' + String.fromCharCode(escaped);");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("} else if (c === \'x\' && escaped > 0x7e && escaped <= 0xff) {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("// we bail out on \\x7f..\\xff,");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("// leaving whole string escaped,");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("// as it\'s probably completely binary");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("return s;");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                        ");
        _builder.append("out += String.fromCharCode(escaped);");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else if (c === \'\\\\\') {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("esc = true;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("} else {");
        _builder.append("\r\n");
        _builder.append("                    ");
        _builder.append("out += c;");
        _builder.append("\r\n");
        _builder.append("                ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return out;");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("if (typeof define === \"function\" && define.amd) {");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("define([], function() {");
        _builder.append("\r\n");
        _builder.append("            ");
        _builder.append("return { js_beautify: js_beautify };");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("});");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("} else if (typeof exports !== \"undefined\") {");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// Add support for CommonJS. Just put this file somewhere on your require.paths");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// and you will be able to `var js_beautify = require(\"beautify\").js_beautify`.");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("exports.js_beautify = js_beautify;");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("} else if (typeof window !== \"undefined\") {");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// If we\'re running a web page and don\'t have either of the above, add our one global");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("window.js_beautify = js_beautify;");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("} else if (typeof global !== \"undefined\") {");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("// If we don\'t even have window, try global.");
        _builder.append("\r\n");
        _builder.append("        ");
        _builder.append("global.js_beautify = js_beautify;");
        _builder.append("\r\n");
        _builder.append("    ");
        _builder.append("}");
        _builder.append("\r\n");
        _builder.append("\r\n");
        _builder.append("}());");
        _builder.append("\r\n");
        _builder.append("\t");
        _builder.append("\r\n");

        code = _builder.toString();

        return code;
    }

}
